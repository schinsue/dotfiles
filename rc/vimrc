" This vimrc automatically installs everything it needs.
" To install, or reinstall, remove ~/.vim directory and open Vim.

set nocompatible
filetype off

let needsToInstallBundles=0
if !isdirectory(expand("~/.vim/bundle/Vundle.vim"))
  echo "\nInstalling Vim dependencies... Please be patient!\n"
  silent !mkdir -p ~/.vim/tmp
  silent !mkdir -p ~/.vim/swap
  silent !mkdir -p ~/.vim/undo
  silent !mkdir -p ~/.vim/bundle
  silent !mkfifo ~/.vim/commands-fifo
  silent !git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
  let needsToInstallBundles=1
endif

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Do these first, because other plugins depend on them
Plugin 'VundleVim/Vundle.vim'
Plugin 'Syntastic'
Plugin 'tpope/vim-fugitive'

" Colorschemes
Plugin 'rafi/awesome-vim-colorschemes'

" Syntax & Language Support
Plugin 'sheerun/vim-polyglot'
Plugin 'Chiel92/vim-autoformat'

" Autocomplete
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'Valloric/YouCompleteMe'

" Other
Plugin 'airblade/vim-gitgutter'
Plugin 'tpope/vim-surround'
Plugin 'scrooloose/nerdtree'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'csexton/trailertrash.vim'
Plugin 'godlygeek/tabular'
Plugin 'tomtom/tcomment_vim'
Plugin 'tpope/vim-abolish'
Plugin 'tpope/vim-sensible'
Plugin 'tpope/vim-unimpaired'
Plugin 'tpope/vim-vinegar'
Plugin 'michaeljsmith/vim-indent-object'
Plugin 'junegunn/fzf', { 'do': { -> fzf#install()  }  }
Plugin 'junegunn/fzf.vim'
Plugin 'mhinz/vim-startify'
Plugin 'jiangmiao/auto-pairs'
Plugin 'christoomey/vim-tmux-navigator'

" Always last
Plugin 'Lokaltog/vim-powerline'

call vundle#end()

if needsToInstallBundles == 1
  echo "\nInstalling plugins.\n"
  :PluginInstall
  echo "\nInstalled.\n"
endif

filetype plugin indent on

" ==========================
" SETTINGS
" ==========================

if has("gui_macvim")
  set antialias                      " Pretty
  set guioptions=Ace                 " No menubar, toolbar or scrollbars, as minimal as possible
  colorscheme onedark                " Pastel colors
  set fuoptions=maxvert,maxhorz      " Fixes Full Screen on OSX
  " If you are on OSX Lion, and you hate Lion's native full screen, turn it off for macvim:
  "   defaults write org.vim.MacVim MMNativeFullScreen 0
  " Press Ctrl+Cmd+F to go full screen
else
  colorscheme onedark " Use Terminal version of ir_black
end

set vb t_vb=               " Turn off beep
set lazyredraw             " Don't redraw during macro execution
set synmaxcol=1024         " Stop syntax highlighting for long lines
set number                 " Relative line numbering
set nowrap                 " No wrapping by default
set scrolloff=4            " Keep a few lines above and below current line
set equalalways            " create equally sized splits
set splitbelow splitright  " split placement
set wildmode=longest,list  " Makes completion in command mode like bash
set history=10000          " Keep a lot of stuff in history
set backup                 " Make backups
set backupdir=~/.vim/tmp/  " Keep backups in a central location
set directory=~/.vim/swap/ " Keep swap files in a central location
set undofile               " Keep undo history even after closing Vim
set undodir=~/.vim/undo    " Where to store undo history
set timeoutlen=500         " Don't wait so long for ambiguous leader keys
set noesckeys              " Get rid of the delay when hitting esc!
set gdefault               " assume the /g flag on :s substitutions to replace all matches in a line

" Indenting always 2 spaces, sorry Python
set cindent
set expandtab
set shiftwidth=2
set smartindent
set softtabstop=2
set tabstop=2
set autoindent

syntax on " enable highlighting

set backspace=indent,eol,start " let backspace delete over lines

" Search
set smartcase
set hlsearch

let g:netrw_nobeval = 1

" Autocomplete
let g:UltiSnipsExpandTrigger="<c-x>"

let g:ackprg = 'ag --nogroup --nocolor --column'

let g:Powerline_symbols = 'fancy' " Use fancy symbols in vim-powerline

set formatprg=par\ -w80\ -q

let g:move_key_modifier = 'X'
let NERDTreeHijackNetrw = 0 " Fix autoload session for startify

" ==========================
" AUTOCOMMANDS
" ==========================

" When editing a file, always jump to the last known cursor position.
autocmd BufReadPost *
      \ if line("'\"") > 1 && line("'\"") <= line("$") |
      \   exe "normal! g`\"" |
      \ endif

" ==========================
" GENERAL KEY MAPPINGS
" ==========================

" Rename :W to :w
command! W :w

" FZF
nmap <C-P> :FZF<CR>

" pressing j or k in a long wrapped will put cursor down/up one visual line
nnoremap j gj
nnoremap k gk

" Shift+K becomes similar to Shift+J
nnoremap <S-k> kJ

" Remap return to clear search highlight
nnoremap <cr> :nohlsearch<cr>

" highlight the 100th character
highlight ColorColumn ctermbg=magenta
call matchadd('ColorColumn', '\%81v', 140)

" In normal mode, space will start command mode.
nnoremap <space> :
vnoremap <space> :

" Buffer Explorer opens with Ctrl+B
nnoremap <C-B> :Buffers<cr>

" %% will become the directory of the current file
cnoremap %% <C-R>=expand('%:h').'/'<cr>

" A common typo is ":E" when actually meaning ":e" and not ":Explore" or
" ":Errors".
cnoreabbrev E e

" move selected lines up one line
xnoremap <C-S-k>  :m-2<CR>gv=gv

" move selected lines down one line
xnoremap <C-S-j> :m'>+<CR>gv=gv"

" ==========================
" LEADER KEYS
" ==========================

let mapleader = ","

" Map ,e and ,v to open files in the same directory as the current file
map <leader>e :edit %%
map <leader>v :view %%
map <leader>m :vsplit %%
map <leader>n :split %%

" Map nerdTree to ,ne
nmap <leader>ne :NERDTree<cr>

" Map Autoformat to ,f
nmap <leader>f :Autoformat<cr>

" Map Rg to ,p
nmap <leader>p :Rg<cr>

" Align = signs
nmap <Leader>a= :Tabularize /=<cr>
vmap <Leader>a= :Tabularize /=<cr>gv
" Align hashrockets
nmap <Leader>a> :Tabularize /=><cr>
vmap <Leader>a> :Tabularize /=><cr>gv
" Align commas
nmap <Leader>a, :Tabularize /,\zs/l1<cr>
vmap <Leader>a, :Tabularize /,\zs/l1<cr>gv
" Align words and fix indentation
nmap <Leader>aw :Tabularize /\s\+\zs/l1<cr>=ip
vmap <Leader>aw :Tabularize /\s\+\zs/l1<cr>gv=gv
" Align comments
nmap <Leader>ac :Tabularize /#<cr>
" Align blocks
nmap <Leader>a{ :Tabularize /{<cr>
vmap <Leader>a{ :Tabularize /{<cr>gv
vmap <Leader>a{ :Tabularize /{<cr>gv

" Fugitive (Git)
map <Leader><Leader>c :Git commit<cr>
map <Leader><Leader>b :Gblame<cr>
map <Leader><Leader>s :Git<cr>
map <Leader><Leader>w :Gwrite<cr>
map <Leader><Leader>p :Git push<cr>
map <Leader><Leader>f :Git fetch<cr>
map <Leader><Leader>u :Git up<cr>

" In visual mode, the range is already fixed
vmap <Leader>a: :Tabularize/\(:.*\)\@<!:\zs/l1<cr>gv

" Syntastic configuration
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_ruby_mri_exec = '~/.rbenv/shims/ruby'
